/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.footbal;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class FootballTicketingApp extends javax.swing.JFrame {

    /**
     * Creates new form FootballTicketingApp
     */
    ArrayList<Booking>ticketList = new ArrayList();
    ArrayList<Match>matchList = new ArrayList();
    ArrayList<Customer>customerList = new ArrayList();
    
    public FootballTicketingApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        venueTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        seatsTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        matchDateTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        teamsTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        kickoffTxt = new javax.swing.JTextField();
        createMatchBtn = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        mainStandPriceTxt = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        awayStandPriceTxt = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        sideStandPriceTxt = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        matchTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        updateMatchSeatsTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        updateMatchDateTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        updateMatchTeamsTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        updateMatchKickoffTxt = new javax.swing.JTextField();
        updateMatchBtn = new javax.swing.JButton();
        delMatchBtn = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        customerNicTxt = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        customerNameTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        customerAgeTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        customerAddressTxt = new javax.swing.JTextField();
        addCustomerBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        customerPhoneTxt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        updateCustNameTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        updateCustAddressTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        updateCustPhoneTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        updateCustAgeTxt = new javax.swing.JTextField();
        updateCustBtn = new javax.swing.JButton();
        delCustBtn = new javax.swing.JButton();
        inputPanel = new javax.swing.JPanel();
        label6 = new javax.swing.JLabel();
        dateText = new javax.swing.JTextField();
        label7 = new javax.swing.JLabel();
        bookBtn = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        customerComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        standComboBox = new javax.swing.JComboBox<>();
        matchComboBox = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        updateStandComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        updateBookingPriceTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        updateBookingDateTxt = new javax.swing.JTextField();
        updateBookingBtn = new javax.swing.JButton();
        delBookingBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Football Ticketing");

        jTabbedPane3.setFocusable(false);

        jTabbedPane6.setFocusable(false);

        jLabel8.setText("Venue:");

        venueTxt.setColumns(20);

        jLabel9.setText("Seats Available:");

        seatsTxt.setColumns(20);

        jLabel10.setText("Date:");

        matchDateTxt.setColumns(20);
        matchDateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchDateTxtActionPerformed(evt);
            }
        });

        jLabel11.setText("Teams:");

        teamsTxt.setColumns(20);

        jLabel12.setText("Kick-Off:");

        kickoffTxt.setColumns(20);

        createMatchBtn.setText("Create Match!");
        createMatchBtn.setFocusable(false);
        createMatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMatchBtnActionPerformed(evt);
            }
        });

        jLabel24.setText("Main Stand Price:");

        mainStandPriceTxt.setColumns(10);

        jLabel25.setText("Away Stand Price:");

        awayStandPriceTxt.setColumns(10);

        jLabel26.setText("Side Stands Price:");

        sideStandPriceTxt.setColumns(10);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(createMatchBtn)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seatsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(venueTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(matchDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(teamsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kickoffTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(66, 66, 66)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainStandPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(awayStandPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideStandPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(venueTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel24)
                            .addComponent(mainStandPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seatsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(awayStandPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(matchDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(teamsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(kickoffTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createMatchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sideStandPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26)))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane6.addTab("Create Match", jPanel5);

        matchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Venue", "Seats Available", "Date", "Teams", "Kick-Off"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        matchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matchTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(matchTable);
        if (matchTable.getColumnModel().getColumnCount() > 0) {
            matchTable.getColumnModel().getColumn(0).setResizable(false);
            matchTable.getColumnModel().getColumn(1).setResizable(false);
            matchTable.getColumnModel().getColumn(2).setResizable(false);
            matchTable.getColumnModel().getColumn(3).setResizable(false);
            matchTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel15.setText("Seats Available:");

        updateMatchSeatsTxt.setColumns(20);

        jLabel13.setText("Match Date:");

        updateMatchDateTxt.setColumns(20);

        jLabel16.setText("Teams:");

        updateMatchTeamsTxt.setColumns(20);

        jLabel17.setText("Kick-Off:");

        updateMatchKickoffTxt.setColumns(20);

        updateMatchBtn.setText("Update!");
        updateMatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMatchBtnActionPerformed(evt);
            }
        });

        delMatchBtn.setText("Delete!");
        delMatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delMatchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 997, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(updateMatchSeatsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel13))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(updateMatchBtn)
                            .addComponent(updateMatchTeamsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateMatchDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateMatchKickoffTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delMatchBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(updateMatchSeatsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(updateMatchDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(updateMatchTeamsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(updateMatchKickoffTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateMatchBtn)
                    .addComponent(delMatchBtn))
                .addGap(0, 99, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane6.addTab("View Matches", jPanel7);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane6)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane6)
        );

        jTabbedPane3.addTab("Match", jPanel4);

        jTabbedPane2.setFocusable(false);

        jLabel19.setText("Customer NIC:");

        customerNicTxt.setColumns(20);

        jLabel20.setText("Customer Name:");

        customerNameTxt.setColumns(20);

        jLabel21.setText("Customer Age:");

        customerAgeTxt.setColumns(20);

        jLabel22.setText("Customer Address:");

        customerAddressTxt.setColumns(20);

        addCustomerBtn.setText("Add Customer");
        addCustomerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Customer Phone:");

        customerPhoneTxt.setColumns(20);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(346, 346, 346)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addCustomerBtn)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNicTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerAgeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerPhoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(customerNicTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(customerNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(customerAgeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(customerAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(customerPhoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCustomerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Create Customer", jPanel12);

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIC", "Name", "Age", "Address", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(customerTable);
        if (customerTable.getColumnModel().getColumnCount() > 0) {
            customerTable.getColumnModel().getColumn(0).setResizable(false);
            customerTable.getColumnModel().getColumn(1).setResizable(false);
            customerTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            customerTable.getColumnModel().getColumn(2).setResizable(false);
            customerTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            customerTable.getColumnModel().getColumn(3).setResizable(false);
            customerTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            customerTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel3.setText("Name:");

        updateCustNameTxt.setColumns(20);

        jLabel4.setText("Address:");

        updateCustAddressTxt.setColumns(20);

        jLabel7.setText("Phone:");

        updateCustPhoneTxt.setColumns(20);

        jLabel14.setText("Age:");

        updateCustAgeTxt.setColumns(20);

        updateCustBtn.setText("Update!");
        updateCustBtn.setFocusable(false);
        updateCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustBtnActionPerformed(evt);
            }
        });

        delCustBtn.setText("Delete!");
        delCustBtn.setFocusable(false);
        delCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCustBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updateCustBtn)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateCustNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateCustAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateCustAgeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delCustBtn)
                            .addComponent(updateCustPhoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(211, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(updateCustNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(updateCustAgeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(updateCustAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(updateCustPhoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCustBtn)
                    .addComponent(delCustBtn))
                .addGap(0, 89, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("View Customer", jPanel2);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Customer", jPanel11);

        label6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label6.setText("Date(current):");

        dateText.setColumns(20);
        dateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTextActionPerformed(evt);
            }
        });

        label7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label7.setText("Match:");

        bookBtn.setText("Book!");
        bookBtn.setFocusable(false);
        bookBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Customer:");
        jLabel30.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        customerComboBox.setFocusable(false);
        customerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboBoxActionPerformed(evt);
            }
        });

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Stand:");
        jLabel31.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel6.setText("Price:");
        jLabel6.setToolTipText("");

        priceTxt.setColumns(20);
        priceTxt.setFocusable(false);

        standComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Stand--", "Main Stand", "Away Stand", "Side-Stand Left", "Side-Stand Right" }));
        standComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                standComboBoxItemStateChanged(evt);
            }
        });
        standComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                standComboBoxMouseClicked(evt);
            }
        });
        standComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standComboBoxActionPerformed(evt);
            }
        });

        matchComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                matchComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addContainerGap(340, Short.MAX_VALUE)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel30)
                            .addComponent(label7)
                            .addComponent(label6)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel31))
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(standComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(matchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(344, 344, 344))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(label7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(matchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel5))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(standComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label6)
                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Book A Ticket", inputPanel);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIC", "Name", "Age", "Address", "Phone", "Match Number", "Match Date", "Stand", "Price", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.setFocusable(false);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setResizable(false);
            dataTable.getColumnModel().getColumn(1).setResizable(false);
            dataTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            dataTable.getColumnModel().getColumn(2).setResizable(false);
            dataTable.getColumnModel().getColumn(3).setResizable(false);
            dataTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            dataTable.getColumnModel().getColumn(4).setResizable(false);
            dataTable.getColumnModel().getColumn(5).setResizable(false);
            dataTable.getColumnModel().getColumn(5).setPreferredWidth(100);
            dataTable.getColumnModel().getColumn(6).setResizable(false);
            dataTable.getColumnModel().getColumn(7).setResizable(false);
            dataTable.getColumnModel().getColumn(7).setPreferredWidth(150);
            dataTable.getColumnModel().getColumn(8).setResizable(false);
            dataTable.getColumnModel().getColumn(9).setResizable(false);
        }

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Stand:");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        updateStandComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Main Stand", "Away Stand", "Side-Stand Left", "Side-Stand Right" }));
        updateStandComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateStandComboBoxItemStateChanged(evt);
            }
        });
        updateStandComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStandComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Price:");

        updateBookingPriceTxt.setColumns(10);

        jLabel23.setText("Date:");

        updateBookingDateTxt.setColumns(10);

        updateBookingBtn.setText("Update!");
        updateBookingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookingBtnActionPerformed(evt);
            }
        });

        delBookingBtn.setText("Delete!");
        delBookingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBookingBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 997, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(422, 422, 422)
                            .addComponent(jLabel18)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(updateStandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(updateBookingBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(delBookingBtn))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel23)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(updateBookingDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateBookingPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(updateStandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(updateBookingPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateBookingDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delBookingBtn)
                    .addComponent(updateBookingBtn))
                .addGap(0, 64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("View Bookings", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
        int rowIndex = dataTable.getSelectedRow();
        int matchNum = Integer.parseInt(tableModel.getValueAt(rowIndex, 5).toString())- 1;
        Match match = matchList.get(matchNum);
        String stand = tableModel.getValueAt(rowIndex, 7).toString();
        
        if(stand.equals("Main Stand")){
            updateStandComboBox.setSelectedIndex(0);
            updateBookingPriceTxt.setText(match.getMainStandPrice()+ "");          
        }else if(stand.equals("Away Stand")){
            updateStandComboBox.setSelectedIndex(1);
            updateBookingPriceTxt.setText(match.getAwayStandPrice() + "");
        }else if(stand.equals("Side-Stand Left")){
            updateStandComboBox.setSelectedIndex(2);
            updateBookingPriceTxt.setText(match.getSideStandPrice() + "");
        } else if(stand.equals("Side-Stand Right")){
            updateStandComboBox.setSelectedIndex(3);
            updateBookingPriceTxt.setText(match.getSideStandPrice() + "");
        }
        updateBookingDateTxt.setText(tableModel.getValueAt(rowIndex, 9).toString());
    }//GEN-LAST:event_dataTableMouseClicked

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        // TODO add your handling code here:
        String date = dateText.getText();
        double price;
        String matchDate, name, age, address, phone, stand, nic;        

        // Validate the input data
        try {
            price = Double.parseDouble(priceTxt.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please Select a Stand first!");
            return;
        }

        int matchNum, custIndex;
        matchNum = matchComboBox.getSelectedIndex();
        if (matchList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No matches found. Please Create Match First!");
            return;
        }

        // Check if there are enough seats available
        int numberOfSeats = matchList.get(matchNum).getSeats();
        if (numberOfSeats == 0) {
            JOptionPane.showMessageDialog(this, "Insufficient seats available.");
            return;
        }

        stand = (String) standComboBox.getSelectedItem();
        
        //validating date
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yy");
        dateFormat.setLenient(false); // To ensure strict date parsing

        try {
            Date inputDate = dateFormat.parse(date);
            Match matchData = matchList.get(matchNum);
            matchDate = matchData.getDate();
            Date matchDateObj = dateFormat.parse(matchDate);

            // Compare the input date with the match date
            if (inputDate.after(matchDateObj)) {
                JOptionPane.showMessageDialog(this, "Invalid date. Date should be on or before the match date.");
                return;
            }

            // Decrementing number of seats
            numberOfSeats -= 1;
            matchData.setSeats(numberOfSeats);
            matchList.set(matchNum, matchData);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please enter a valid date in the format dd/mm/yy.");
            return;
        }

        // Retrieve additional data from customerList based on custIndex
        custIndex = customerComboBox.getSelectedIndex();

        if (customerList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Customer not found. Please Create Customer First!");
            return;
        }              

        if (custIndex >= 0 && custIndex < customerList.size()) {
            Customer customer = customerList.get(custIndex);
            nic = customer.getCustNic();
            name = customer.getCustName();
            age = customer.getCustAge();
            address = customer.getCustAddress();
            phone = customer.getCustPhone();
        } else {            
            JOptionPane.showMessageDialog(this, "Customer not found");
            return;
        }
        // If all validations pass, proceed with booking
        Booking ticketData = new Booking();
        ticketData.setMatchNum(matchNum);
        ticketData.setDate(date);
        ticketData.setPrice(price);
        ticketData.setStand(stand);

        // Add data to the table       
        Object[] rowData = {nic, name, age, address, phone, matchNum + 1, matchDate, stand, price, date};
        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
        tableModel.addRow(rowData);
        ticketList.add(ticketData);        

        // Update the seats available in matchTable
        updateSeatsInMatchTable(matchNum, numberOfSeats);

        JOptionPane.showMessageDialog(this, "Ticket booked successfully!");
        // Clear the text fields after booking
        dateText.setText("");      
    }//GEN-LAST:event_bookBtnActionPerformed

    private void dateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateTextActionPerformed

    private void addCustomerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerBtnActionPerformed
        // TODO add your handling code here:
        Customer cust = new Customer();
        String c1, c2, c3, c4, c5;
              
        c1 = customerNicTxt.getText();
        c2 = customerNameTxt.getText();
        c3 = customerAgeTxt.getText();
        c4 = customerAddressTxt.getText();
        c5 = customerPhoneTxt.getText();
        
        // Validate data
        if (c1.isEmpty() || c2.isEmpty() || c3.isEmpty() || c4.isEmpty() || c5.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required. Please fill in all details.");
            return;
        }

        // Validate NIC uniqueness
        for (Customer existingCustomer : customerList) {
            if (existingCustomer.getCustNic().equals(c1)) {
                JOptionPane.showMessageDialog(this, "NIC already exists for another customer.");
                return;
            }
        }

        // Validate age (numeric, between 0 and 106)
        try {
            int age = Integer.parseInt(c3);
            if (age < 0 || age > 106) {
                JOptionPane.showMessageDialog(this, "Invalid age. Age should be between 0 and 106.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid age format. Age should be a numeric value.");
            return;
        }

        // Validate phone (numeric)
        if (!c5.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Invalid phone number. Phone should contain only digits.");
            return;
        }

        // Validate name (no digits allowed)
        if (c2.matches(".*\\d.*")) {
            JOptionPane.showMessageDialog(this, "Invalid name. Name cannot contain digits.");
            return;
        }


        cust.setCustNic(c1);
        cust.setCustName(c2);
        cust.setCustAge(c3);
        cust.setCustAddress(c4);
        cust.setCustPhone(c5);
        customerList.add(cust);
        
        Object rowData [] = {c1, c2, c3, c4, c5};
        DefaultTableModel custTableModel = (DefaultTableModel) customerTable.getModel();
        custTableModel.addRow(rowData);
        
        JOptionPane.showMessageDialog(this, "Customer Created!");

        customerNicTxt.setText("");
        customerNameTxt.setText("");
        customerAgeTxt.setText("");
        customerAddressTxt.setText("");
        customerPhoneTxt.setText("");
        customerComboBox.addItem(c1 + " " + c2);
    }//GEN-LAST:event_addCustomerBtnActionPerformed

    private void matchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matchTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel matchTableModel = (DefaultTableModel) matchTable.getModel();
        int selectedRowIndex = matchTable.getSelectedRow();
        
        updateMatchSeatsTxt.setText(matchTableModel.getValueAt(selectedRowIndex, 1).toString());
        
        updateMatchDateTxt.setText(matchTableModel.getValueAt(selectedRowIndex, 2).toString());
        
        updateMatchTeamsTxt.setText(matchTableModel.getValueAt(selectedRowIndex, 3).toString());
        
        updateMatchKickoffTxt.setText(matchTableModel.getValueAt(selectedRowIndex, 4).toString());
        
    }//GEN-LAST:event_matchTableMouseClicked

    private void createMatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMatchBtnActionPerformed
        // TODO add your handling code here:
        Match matchData = new Match();
        String venue = venueTxt.getText();
        String seatsStr = seatsTxt.getText();
        String dateStr = matchDateTxt.getText();
        String teams = teamsTxt.getText();
        String time = kickoffTxt.getText();
        String mainStandPriceStr = mainStandPriceTxt.getText();
        String awayStandPriceStr = awayStandPriceTxt.getText();
        String sideStandPriceStr = sideStandPriceTxt.getText();

        // Validate data
        if (venue.isEmpty() || seatsStr.isEmpty() || dateStr.isEmpty() || teams.isEmpty() || time.isEmpty() || mainStandPriceStr.isEmpty() || awayStandPriceStr.isEmpty() || sideStandPriceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required. Please fill in all details.");
            return;
        }

        // Validate venue (alphabets only)
        if (!venue.matches("^[a-zA-Z ]+$")) {
            JOptionPane.showMessageDialog(this, "Invalid venue. Venue can only contain alphabets and spaces.");
            return;
        }

        // Validate seats (numeric)
        int seats;
        try {
            seats = Integer.parseInt(seatsStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number of seats. Seats should be a numeric value.");
            return;
        }

        // Validate date format (dd/mm/yy)
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yy");
        dateFormat.setLenient(false);
        Date matchDate;
        try {
            matchDate = dateFormat.parse(dateStr);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Date should be in the format dd/mm/yy.");
            return;
        }

        // Validate date
        Date currentDate = new Date();
        if (matchDate.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "Invalid date. Match date should be later than the current date.");
            return;
        }

        // Validate time (hh:mm format, between 12:00 and 21:00)
        if (!time.matches("^(1[2-9]|2[0-1]):[0-5][0-9]$")) {
            JOptionPane.showMessageDialog(this, "Invalid time format. Kickoff time should be in the format hh:mm and between 12:00 and 21:00.");
            return;
        }

        // Validate prices
        double mainStandPrice, awayStandPrice, sideStandPrice;
        try {
            mainStandPrice = Double.parseDouble(mainStandPriceStr);
            awayStandPrice = Double.parseDouble(awayStandPriceStr);
            sideStandPrice = Double.parseDouble(sideStandPriceStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid price format. Prices should be numeric values.");
            return;
        }
        
        matchData.setVenue(venue);
        matchData.setSeats(seats);
        matchData.setDate(dateStr);
        matchData.setTeams(teams);
        matchData.setTime(time);
        matchData.setMainStandPrice(mainStandPrice);
        matchData.setAwayStandPrice(awayStandPrice);
        matchData.setSideStandPrice(sideStandPrice);

        Object data [] = {venue, seats, dateStr, teams, time};
        DefaultTableModel matchTableModel = (DefaultTableModel) matchTable.getModel();
        matchTableModel.addRow(data);
        matchList.add(matchData);
        
        JOptionPane.showMessageDialog(this, "Match Created!");

        venueTxt.setText("");
        seatsTxt.setText("");
        matchDateTxt.setText("");
        teamsTxt.setText("");
        kickoffTxt.setText("");       
        mainStandPriceTxt.setText("");
        awayStandPriceTxt.setText("");
        sideStandPriceTxt.setText("");
        matchComboBox.addItem(matchList.size() + ":  " + teams);
    }//GEN-LAST:event_createMatchBtnActionPerformed

    private void customerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerComboBoxActionPerformed

    private void matchDateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchDateTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matchDateTxtActionPerformed

    private void standComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standComboBoxActionPerformed
        // TODO add your handling code here:
           
    }//GEN-LAST:event_standComboBoxActionPerformed

    private void standComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_standComboBoxItemStateChanged
        // TODO add your handling code here:
        int matchNum;
        try{
            matchNum = matchComboBox.getSelectedIndex();
        } catch (NullPointerException e){
            JOptionPane.showMessageDialog(this, "Please Create a Match First!");
            return;
        }
        
        Match match = matchList.get(matchNum);
        String stand = (String) standComboBox.getSelectedItem();       
        if (stand.equals("Side-Stand Left") || stand.equals("Side-Stand Right")) {
            priceTxt.setText(match.getSideStandPrice() + "");
        } else if (stand.equals("Away Stand")) {
            priceTxt.setText(match.getAwayStandPrice() + "");
        } else if (stand.equals("Main Stand")) {
            priceTxt.setText(match.getMainStandPrice() + "");
        } else if (stand.equals("--Select Stand--")){
            priceTxt.setText("");
        }
    }//GEN-LAST:event_standComboBoxItemStateChanged

    private void standComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_standComboBoxMouseClicked
        // TODO add your handling code here:       
    }//GEN-LAST:event_standComboBoxMouseClicked

    private void matchComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_matchComboBoxItemStateChanged
        // TODO add your handling code here:
        standComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_matchComboBoxItemStateChanged

    private void updateBookingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookingBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
        int selectedRowIndex = dataTable.getSelectedRow();
        Booking ticketData = ticketList.get(selectedRowIndex);
        String standUpdate = updateStandComboBox.getSelectedItem().toString();
        String priceStr = updateBookingPriceTxt.getText();
        String dateStr = updateBookingDateTxt.getText();

        // Validate price (double)
        double price;
        try {
            price = Double.parseDouble(priceStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid price format. Price should be a numeric value.");
            return;
        }

        // Validate date format (dd/mm/yy)
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yy");
        dateFormat.setLenient(false);
        Date bookingDate;
        try {
            bookingDate = dateFormat.parse(dateStr);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Date should be in the format dd/mm/yy.");
            return;
        }

        // Get the match date from the table model (column index 6) and validate it against the booking date
        String matchDateStr = tableModel.getValueAt(selectedRowIndex, 6).toString();
        Date matchDate;
        try {
            matchDate = dateFormat.parse(matchDateStr);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Error parsing match date from the table.");
            return;
        }

        if (bookingDate.after(matchDate)) {
            JOptionPane.showMessageDialog(this, "Invalid date. Booking date cannot be later than the match date.");
            return;
        }

        if (selectedRowIndex >= 0) {
            tableModel.setValueAt(standUpdate, selectedRowIndex, 7);
            ticketData.setStand(standUpdate);

            tableModel.setValueAt(priceStr, selectedRowIndex, 8);
            ticketData.setPrice(price);

            tableModel.setValueAt(dateStr, selectedRowIndex, 9);
            ticketData.setDate(dateStr);

            // Updating ticketList
            ticketList.set(selectedRowIndex, ticketData);
            JOptionPane.showMessageDialog(this, "Booking updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Update Error! Try selecting a row in the table first.");
        }
    }//GEN-LAST:event_updateBookingBtnActionPerformed

    private void updateStandComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_updateStandComboBoxItemStateChanged
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
        int rowIndex = dataTable.getSelectedRow();
        int matchNum = Integer.parseInt(tableModel.getValueAt(rowIndex, 5).toString())- 1;      
        Match match = matchList.get(matchNum);
        
        String stand = (String) updateStandComboBox.getSelectedItem();       
        if (stand.equals("Side-Stand Left") || stand.equals("Side-Stand Right")) {
            updateBookingPriceTxt.setText(match.getSideStandPrice() + "");
        } else if (stand.equals("Away Stand")) {
            updateBookingPriceTxt.setText(match.getAwayStandPrice() + "");
        } else if (stand.equals("Main Stand")) {
            updateBookingPriceTxt.setText(match.getMainStandPrice() + "");
        }
    }//GEN-LAST:event_updateStandComboBoxItemStateChanged

    private void updateStandComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStandComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateStandComboBoxActionPerformed

    private void updateCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel customerTableModel = (DefaultTableModel) customerTable.getModel();
        DefaultTableModel dataTableModel = (DefaultTableModel) dataTable.getModel();
        int selectedRowIndex = customerTable.getSelectedRow();

        if (selectedRowIndex >= 0) {
            Customer customer = customerList.get(selectedRowIndex);

            // Validate custName (can contain only alphabets)
            String updateCustName = updateCustNameTxt.getText().trim();
            if (updateCustName.matches(".*\\d.*")) {
                JOptionPane.showMessageDialog(this, "Invalid name. Name cannot contain digits.");
                return;
            }

            // Validate custAge (cannot contain alphabets and must be a non-negative integer)
            String updateCustAge = updateCustAgeTxt.getText().trim();
            if (!updateCustAge.matches("^\\d+$")) {
                JOptionPane.showMessageDialog(this, "Invalid age. Age should contain only numbers.");
                return;
            }

            // Validate custPhone (cannot contain alphabets and must be a non-negative integer)
            String updateCustPhone = updateCustPhoneTxt.getText().trim();
            if (!updateCustPhone.matches("^\\d+$")) {
                JOptionPane.showMessageDialog(this, "Invalid phone number. Phone number should contain only numbers.");
                return;
            }

            // Update customer details in customerTable
            customerTableModel.setValueAt(updateCustName, selectedRowIndex, 1);
            customer.setCustName(updateCustName);

            customerTableModel.setValueAt(updateCustAge, selectedRowIndex, 2);
            customer.setCustAge(updateCustAge);

            customerTableModel.setValueAt(updateCustAddressTxt.getText(), selectedRowIndex, 3);
            customer.setCustAddress(updateCustAddressTxt.getText());

            customerTableModel.setValueAt(updateCustPhone, selectedRowIndex, 4);
            customer.setCustPhone(updateCustPhone);

            // Update customer details in dataTable (if dataTable is not empty)
            if (dataTableModel.getRowCount() > 0) {
                String nicToUpdate = customer.getCustNic();
                int dataTableRowCount = dataTableModel.getRowCount();
                int dataTableRowIndex = -1;
                for (int i = 0; i < dataTableRowCount; i++) {
                    String nicInDataTable = dataTableModel.getValueAt(i, 0).toString();
                    if (nicInDataTable.equals(nicToUpdate)) {
                        dataTableRowIndex = i;
                        break;
                    }
                }

                if (dataTableRowIndex >= 0) {
                    dataTableModel.setValueAt(updateCustName, dataTableRowIndex, 1);
                    dataTableModel.setValueAt(updateCustAge, dataTableRowIndex, 2);
                    dataTableModel.setValueAt(updateCustAddressTxt.getText(), dataTableRowIndex, 3);
                    dataTableModel.setValueAt(updateCustPhone, dataTableRowIndex, 4);
                }
            }

            customerList.set(selectedRowIndex, customer);
            JOptionPane.showMessageDialog(this, "Customer updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Update Error! Try selecting a row in the table first.");
        }
    }//GEN-LAST:event_updateCustBtnActionPerformed

    private void customerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel customerTableModel = (DefaultTableModel) customerTable.getModel();
        int selectedRowIndex = customerTable.getSelectedRow();
              
        updateCustNameTxt.setText(customerTableModel.getValueAt(selectedRowIndex, 1).toString());

        updateCustAgeTxt.setText(customerTableModel.getValueAt(selectedRowIndex, 2).toString());

        updateCustAddressTxt.setText(customerTableModel.getValueAt(selectedRowIndex, 3).toString());

        updateCustPhoneTxt.setText(customerTableModel.getValueAt(selectedRowIndex, 4).toString());
        
    }//GEN-LAST:event_customerTableMouseClicked

    private void delBookingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBookingBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
        int selectedRowIndex = dataTable.getSelectedRow();

        if (selectedRowIndex >= 0) {
            int matchNum = (int) tableModel.getValueAt(selectedRowIndex, 5) - 1; // Match number in matchList
            Match matchData = matchList.get(matchNum);

            tableModel.removeRow(selectedRowIndex);
            ticketList.remove(selectedRowIndex);

            // Increment seats in matchData and update the matchList
            int numberOfSeats = matchData.getSeats();
            matchData.setSeats(numberOfSeats + 1);
            matchList.set(matchNum, matchData);

            // Update the seats available column in matchTable
            updateSeatsInMatchTable(matchNum, numberOfSeats + 1);

            JOptionPane.showMessageDialog(this, "Booking deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Delete error! Please select a booking to delete.");
        }             
    }//GEN-LAST:event_delBookingBtnActionPerformed

    private void delCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCustBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel customerTableModel = (DefaultTableModel) customerTable.getModel();
        int selectedRowIndex = customerTable.getSelectedRow();

        if (selectedRowIndex >= 0) {
            String nic = customerTableModel.getValueAt(selectedRowIndex, 0).toString();

            // Check if the NIC is present in dataTable
            DefaultTableModel dataTableModel = (DefaultTableModel) dataTable.getModel();
            for (int i = 0; i < dataTableModel.getRowCount(); i++) {
                String dataTableNic = dataTableModel.getValueAt(i, 0).toString();
                if (nic.equals(dataTableNic)) {
                    JOptionPane.showMessageDialog(null, "Cannot delete customer with booked ticket!");
                    return;
                }
            }

            // If the NIC is not found in dataTable, proceed with deletion
            customerTableModel.removeRow(selectedRowIndex);
            customerList.remove(selectedRowIndex);
            customerComboBox.removeItemAt(selectedRowIndex);
            JOptionPane.showMessageDialog(this, "Customer deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Delete error! Please select a customer to delete.");
        } 
    }//GEN-LAST:event_delCustBtnActionPerformed

    private void updateMatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMatchBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel matchTableModel = (DefaultTableModel) matchTable.getModel();
        int selectedRowIndex = matchTable.getSelectedRow();

        if (selectedRowIndex >= 0) {
            // Validate matchSeats
            String matchSeatsText = updateMatchSeatsTxt.getText().trim();
            if (!matchSeatsText.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Invalid match seats. Only numbers allowed.");
                return;
            }
            int matchSeats = Integer.parseInt(matchSeatsText);

            // Validate matchDate
            String matchDateText = updateMatchDateTxt.getText().trim();
            if (!matchDateText.matches("\\d{2}/\\d{2}/\\d{2}")) {
                JOptionPane.showMessageDialog(this, "Invalid match date. Date format should be dd/mm/yy.");
                return;
            }
            // date comparison logic 
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy");
            Date currentDate = new Date();
            try {
                Date matchDate = sdf.parse(matchDateText);
                if (matchDate.before(currentDate)) {
                    JOptionPane.showMessageDialog(this, "Match date must be higher than the current date.");
                    return;
                }
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(this, "Invalid match date.");
                return;
            }

            // Validate matchTeams
            String matchTeams = updateMatchTeamsTxt.getText().trim();
            if (matchTeams.matches(".*\\d.*")) {
                JOptionPane.showMessageDialog(this, "Invalid match teams. Teams should not contain numbers.");
                return;
            }

            // Validate matchKickoff
            String matchKickoffText = updateMatchKickoffTxt.getText().trim();
            if (!matchKickoffText.matches("^(1[2-9]|2[0-1]):[0-5][0-9]$")) {
                JOptionPane.showMessageDialog(this, "Invalid match kickoff time. Time should be between 12:00 and 21:00.");
                return;
            }

            // Update the data in the matchTableModel
            Match matchData = matchList.get(selectedRowIndex);
            matchTableModel.setValueAt(matchSeats, selectedRowIndex, 1);
            matchData.setSeats(matchSeats);

            matchTableModel.setValueAt(matchDateText, selectedRowIndex, 2);
            matchData.setDate(matchDateText);

            matchTableModel.setValueAt(matchTeams, selectedRowIndex, 3);
            matchData.setTeams(matchTeams);

            matchTableModel.setValueAt(matchKickoffText, selectedRowIndex, 4);
            matchData.setTime(matchKickoffText);

            // Update the data in the dataTable based on the matchNum
            int matchNumToFind = selectedRowIndex + 1; // Since matchNum was incremented by 1 when added to the dataTable

            DefaultTableModel dataTableModel = (DefaultTableModel) dataTable.getModel();
            for (int row = 0; row < dataTableModel.getRowCount(); row++) {
                int matchNumInTable = (int) dataTableModel.getValueAt(row, 5);
                if (matchNumInTable == matchNumToFind) {
                    // Update the corresponding data in the dataTable
                    dataTableModel.setValueAt(matchDateText, row, 6);
                    break;
                }
            }

            // Update the data in the matchList
            matchList.set(selectedRowIndex, matchData);
            JOptionPane.showMessageDialog(this, "Match updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Update Error! Try selecting a row in the table first.");
        }
    }//GEN-LAST:event_updateMatchBtnActionPerformed

    private void delMatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delMatchBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel matchTableModel = (DefaultTableModel) matchTable.getModel();
        int selectedRowIndex = matchTable.getSelectedRow();

        if (selectedRowIndex >= 0) {
            int matchNum = selectedRowIndex + 1; // Match number in matchList

            // Check if the matchNum is present in dataTable
            DefaultTableModel dataTableModel = (DefaultTableModel) dataTable.getModel();
            for (int i = 0; i < dataTableModel.getRowCount(); i++) {
                int dataTableMatchNum = (int) dataTableModel.getValueAt(i, 5);
                if (matchNum == dataTableMatchNum) {
                    JOptionPane.showMessageDialog(null, "Cannot delete match with booked tickets!");
                    return;
                }
            }

            // If the matchNum is not found in dataTable, proceed with deletion
            matchTableModel.removeRow(selectedRowIndex);
            matchList.remove(selectedRowIndex);
            matchComboBox.removeItemAt(selectedRowIndex);
            JOptionPane.showMessageDialog(this, "Match deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Delete error! Please select a match to delete.");
        }
    }//GEN-LAST:event_delMatchBtnActionPerformed
           
    private void updateSeatsInMatchTable(int matchNum, int numSeats) {           
            DefaultTableModel matchTableModel = (DefaultTableModel) matchTable.getModel();
            matchTableModel.setValueAt(numSeats, matchNum, 1);
    }
    
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FootballTicketingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FootballTicketingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FootballTicketingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FootballTicketingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FootballTicketingApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerBtn;
    private javax.swing.JTextField awayStandPriceTxt;
    private javax.swing.JButton bookBtn;
    private javax.swing.JButton createMatchBtn;
    private javax.swing.JTextField customerAddressTxt;
    private javax.swing.JTextField customerAgeTxt;
    private javax.swing.JComboBox<String> customerComboBox;
    private javax.swing.JTextField customerNameTxt;
    private javax.swing.JTextField customerNicTxt;
    private javax.swing.JTextField customerPhoneTxt;
    private javax.swing.JTable customerTable;
    private javax.swing.JTable dataTable;
    private javax.swing.JTextField dateText;
    private javax.swing.JButton delBookingBtn;
    private javax.swing.JButton delCustBtn;
    private javax.swing.JButton delMatchBtn;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTextField kickoffTxt;
    private javax.swing.JLabel label6;
    private javax.swing.JLabel label7;
    private javax.swing.JTextField mainStandPriceTxt;
    private javax.swing.JComboBox<String> matchComboBox;
    private javax.swing.JTextField matchDateTxt;
    private javax.swing.JTable matchTable;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JTextField seatsTxt;
    private javax.swing.JTextField sideStandPriceTxt;
    private javax.swing.JComboBox<String> standComboBox;
    private javax.swing.JTextField teamsTxt;
    private javax.swing.JButton updateBookingBtn;
    private javax.swing.JTextField updateBookingDateTxt;
    private javax.swing.JTextField updateBookingPriceTxt;
    private javax.swing.JTextField updateCustAddressTxt;
    private javax.swing.JTextField updateCustAgeTxt;
    private javax.swing.JButton updateCustBtn;
    private javax.swing.JTextField updateCustNameTxt;
    private javax.swing.JTextField updateCustPhoneTxt;
    private javax.swing.JButton updateMatchBtn;
    private javax.swing.JTextField updateMatchDateTxt;
    private javax.swing.JTextField updateMatchKickoffTxt;
    private javax.swing.JTextField updateMatchSeatsTxt;
    private javax.swing.JTextField updateMatchTeamsTxt;
    private javax.swing.JComboBox<String> updateStandComboBox;
    private javax.swing.JTextField venueTxt;
    // End of variables declaration//GEN-END:variables

}